  #version 430
  layout(std430, binding = 0) buffer Pos{ float Positions[]; };
  layout(std430, binding = 1) buffer GradientLayout { float Gradients[]; };
  layout(std430, binding = 2) buffer PrevGradientLayout { float PrevGradients[]; };
  layout(std430, binding = 3) buffer GainLayout { float Gain[]; };
  layout(std430, binding = 4) readonly buffer NumPoints { uint NP[]; };
  layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

  layout(push_constant) uniform FieldPushConstants {
    float eta;        // Learning rate
    float minGain;   // Minimum gain value
    float iter;      // Current iteration number
    float mom_iter;  // Iteration number for momentum switch
    float mom;       // Initial momentum value
    float final_mom; // Final momentum value
    float mult;      // Multiplier for position update
  } pc;

  void main() {
    uint workGroupID = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
    uint i = workGroupID * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
    if (i >= NP[0] * 2)
      return;

    float grad = Gradients[i];
    float pgrad = PrevGradients[i];
    float gain = Gain[i];

    gain = sign(grad) != sign(pgrad) ? gain + 0.2 : gain * 0.8;
    gain = max(gain, pc.minGain);

    float etaGain = pc.eta * gain;
    grad = (grad > 0 ? 1 : -1) * abs(grad * etaGain) / etaGain;

    pgrad = (pc.iter < pc.mom_iter ? pc.mom : pc.final_mom) * pgrad - etaGain * grad;

    Gain[i] = gain;
    PrevGradients[i] = pgrad;
    Positions[i] += pgrad * pc.mult;
  }