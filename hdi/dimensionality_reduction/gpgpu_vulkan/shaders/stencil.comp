#version 450

layout(local_size_x = 1) in;

// Uniforms
layout(std430, binding = 0) buffer Points {
    vec2 points[]; // Input points
};

// Output image
layout(rgba8, binding = 1) writeonly uniform image2D outImage;

layout(std430, binding = 2) buffer Dbg { vec2 Bug[]; };


// Push constants for rectangle bounds and image dimensions
layout (push_constant) uniform StencilPushConstants {
    vec2 rect_min; // min bounds of the points rectangle
    vec2 rect_max; // max bounds of the points rectangle
    vec2 imageSize; // dimensions of the output image
} pc;

void main() {
    uint id = gl_GlobalInvocationID.x;
    vec2 point = points[id];

    vec2 range = pc.rect_max - pc.rect_min;

    // Convert point to normalized device coordinates in [0,1]
    vec2 norm = (point - pc.rect_min) / range;
    // Convert to nearest pixel coordinates
    ivec2 pxCoord = ivec2(round(norm * pc.imageSize));
    
    // Draw a 3x3 region around the point
    Bug[id] = pxCoord;
    for (int dy = -1; dy <= 1; ++dy) {
        for (int dx = -1; dx <= 1; ++dx) {
            ivec2 target = pxCoord + ivec2(dx, dy);
            // Bounds check
            if (target.x >= 0 && target.x < pc.imageSize.x &&
                target.y >= 0 && target.y < pc.imageSize.y) {
                imageStore(outImage, target, ivec4(1));
            }
        }
    }
    // // stencil fiducials
    // imageStore(outImage, ivec2(0,0), ivec4(1));
    // imageStore(outImage, ivec2(pc.imageSize.x - 1,pc.imageSize.y -1), ivec4(1));
    // imageStore(outImage, ivec2(0,pc.imageSize.y -1), ivec4(1));
    // imageStore(outImage, ivec2(pc.imageSize.x - 1,0), ivec4(1));
    // // aligned image fiducials
    // ivec2 outSize = imageSize(outImage);
    // imageStore(outImage, ivec2(0,0), ivec4(1));
    // imageStore(outImage, ivec2(outSize.x - 1,outSize.y -1), ivec4(1));
    // imageStore(outImage, ivec2(0,outSize.y -1), ivec4(1));
    // imageStore(outImage, ivec2(outSize.x - 1,0), ivec4(1));
}