name: "Common cmake steps"
description: "Encapsulate cmake composite run steps that are common for Linux and Mac"
# reference https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-composite-run-steps-action
inputs:
  conan-compiler:
    description: "gcc apple-clang"
    required: true
  conan-cc:
    description: "gcc clang"
    required: true
  conan-cxx:
    description: "g++ clang++"
    required: true
  conan-compiler-version:
    description: "A number [gcc: 5 6 7 8 9 10 11 12 13 14] [clang: 39 40 50 60 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [10.0]"
    required: true
  conan-libcxx-version:
    description: "Linux: libstdc++ or Macos: libc++ "
    required: true
  conan-build-type:
    description: "Debug or Release"
    required: true
  conan-build-os:
    description: "Linux or Macos"
    required: true
  conan-channel:
    description: "The reference channel one of [stable python]"
    default: "stable" # Default value for input2
    required: false
  build-arch:
    description: "either x86_64 or armv8 (for macos)"
    required: true
  conan-user:
    description: "pass secrets.LKEB_ARTIFACTORY_USER"
    required: true
  conan-password:
    description: "pass secrets.LKEB_ARTIFACTORY_PASSWORD"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install conan & build configuration
      run: |
        pip3 install conan~=1.66.0
        pip3 install packaging

        if [[ ${{ inputs.conan-build-os }} == "Linux" ]]; then
          if [[ ${{ inputs.conan-channel }} == "python" ]]; then 
            dnf install -y ninja-build;
            yum install -y libomp;
          else
            sudo apt-get install -y ninja-build;
          fi
        fi

        if [[ ${{ inputs.conan-build-os }} == "Linux" ]] && [[ ${{ inputs.conan-compiler-version }} == "10" ]]; then
          sudo apt install gcc-10 g++-10 libstdc++-10-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
          sudo update-alternatives --set gcc /usr/bin/gcc-10
        fi

        export CONAN_CMAKE_PROGRAM=`which cmake`
        echo CMake version:
        cmake --version
        mkdir `pwd`/_conan
        export CONAN_USER_HOME=`pwd`/_conan
        export HOMEBREW_NO_AUTO_UPDATE=1
        conan user

        echo Extend conan cacert.pem
        conanhome=`conan config home`
        cat cert.pem >> $conanhome/cacert.pem

      shell: bash

    - name: Build with conan
      run: |
        export CONAN_USER_HOME=`pwd`/_conan
        echo Add LKEB artifactory as remote
        conan remote add $CONAN_LKEB_ARTIFACTORY $CONAN_UPLOAD
        echo Add upload user
        conan user -r $CONAN_LKEB_ARTIFACTORY -p ${{ inputs.conan-password }} ${{ inputs.conan-user }}
        export CONAN_PACKAGE_NAME=`conan inspect --raw name conanfile.py`

        conan profile new action_build
        conan profile update settings.os=${{ inputs.conan-build-os }} action_build
        conan profile update settings.arch=${{ inputs.build-arch }} action_build
        conan profile update settings.compiler=${{ inputs.conan-compiler }} action_build
        conan profile update settings.compiler.version=${{ inputs.conan-compiler-version }} action_build
        conan profile update settings.compiler.libcxx=${{ inputs.conan-libcxx-version}} action_build
        conan profile show action_build

        if [[ ${{ inputs.conan-build-os }} == "Macos" ]] && [[ ${{ inputs.conan-compiler-version }} == "14" ]]; then
          conan profile new compatibility
          conan profile update settings.lz4/1.9.2:compiler.version=13.0 compatibility
        fi

        export CONAN_SKIP_BROKEN_SYMLINKS_CHECK=1
        export HOMEBREW_NO_AUTO_UPDATE=1
        export CONAN_PACKAGE_VERSION=`conan inspect --raw version conanfile.py`
        if [[ ${{ inputs.conan-build-os }} == "Macos" ]] && [[ ${{ inputs.conan-compiler-version }} == "14" ]]; then
          conan create . HDILib/$CONAN_PACKAGE_VERSION@biovault/${{ inputs.conan-channel }} -pr:h action_build -pr:b action_build -pr compatibility -s build_type=Release -o HDILib:shared=False -o HDILib:fPIC=True
        else
          conan create . HDILib/$CONAN_PACKAGE_VERSION@biovault/${{ inputs.conan-channel }} -pr:h action_build -pr:b action_build -s build_type=Release -o HDILib:shared=False -o HDILib:fPIC=True
        fi

      shell: bash
      env:
        BUILD_SHARED: True
        CONAN_UPLOAD: https://lkeb-artifactory.lumc.nl/artifactory/api/conan/conan-local
        CONAN_LKEB_ARTIFACTORY: lkeb-artifactory
        CC: ${{inputs.conan-cc}}
        CXX: ${{inputs.conan-cxx}}

    - name: Upload to artifactory with conan
      run: |
        export CONAN_USER_HOME=`pwd`/_conan
        export CONAN_PACKAGE_NAME=`conan inspect --raw name conanfile.py`
        export CONAN_SKIP_BROKEN_SYMLINKS_CHECK=1
        conan upload --all --force --confirm -r $CONAN_LKEB_ARTIFACTORY $CONAN_PACKAGE_NAME/*

      shell: bash
      env:
        CONAN_LKEB_ARTIFACTORY: lkeb-artifactory
